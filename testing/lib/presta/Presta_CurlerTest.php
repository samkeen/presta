<?php
require_once dirname(__FILE__) . '/../../PrestaTestBase.php';
require_once dirname(__FILE__) . '/../../../lib/presta/Curler.php';

/**
 * Test class for Presta_Curler.
 * Generated by PHPUnit on 2011-01-30 at 20:42:07.
 */
class Presta_CurlerTest extends PrestaTestBase {

    /**
     * @var Presta_Curler
     */
    protected $curler;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->curler = new Presta_Curler;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testXmit().
     */
    public function testXmit() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testParse_Response_ProperKeys() {
        $http_response = $this->mock_http_resp('two-header-blocks');
        $parsed = $this->curler->parse_response($http_response, $with_headers=true);
        $this->assertArrayHasKey('headers', $parsed);
        $this->assertArrayHasKey('header_blocks', $parsed);
        $this->assertArrayHasKey('entity_body', $parsed);
        $this->assertArrayHasKey('http_version', $parsed);
        $this->assertArrayHasKey('status_code', $parsed);
        $this->assertArrayHasKey('status_label', $parsed);
    }
    public function testParse_Response_ProperHTTPDeclarationElements() {
        $http_response = $this->mock_http_resp('two-header-blocks');
        $parsed = $this->curler->parse_response($http_response, $with_headers=true);
        $this->assertEquals('HTTP/1.1', $parsed['http_version']);
        $this->assertEquals('200', $parsed['status_code']);
        $this->assertEquals('OK', $parsed['status_label']);
    }
    public function testParse_Response_ProperHeader_Blocks() {
        $http_response = $this->mock_http_resp('two-header-blocks');
        $parsed = $this->curler->parse_response($http_response, $with_headers=true);

        $this->assertEquals(2, count($parsed['header_blocks']));
        $first_block = $parsed['header_blocks'][0];
        $this->assertEquals('HTTP/1.0', $first_block['http_version']);
        $this->assertEquals('302', $first_block['status_code']);
        $this->assertEquals('Found', $first_block['status_label']);
        $this->assertNotEmpty($first_block['raw']);

        $final_block = $parsed['header_blocks'][1];
        $this->assertEquals('HTTP/1.1', $final_block['http_version']);
        $this->assertEquals('200', $final_block['status_code']);
        $this->assertEquals('OK', $final_block['status_label']);
        $this->assertNotEmpty($final_block['raw']);
    }

}

<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../classes/presta.php';

/**
 * Test class for Restly.
 * Generated by PHPUnit on 2010-07-16 at 22:11:14.
 */
class PrestaTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Presta
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Presta::instance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }
    /**
     * test that ::instance returns a sigleton of Presta
     */
    public function testInstance() {
        $presta = Presta::instance();
        $this->assertTrue($presta instanceof Presta,
            'Presta::instance() did not return an instance of Presta obj');
        $this->assertSame(Presta::instance(), $presta, 
            'two calls to Presta::instance() do NOT refer to the same object');
    }

    public function testUri() {
        $this->object->uri('http://example.com');
        $this->assertEquals(
            'http://example.com',
            $this->object->uri,
            "After setting URI to [http://example.com], getting the URI attribute returned [{$this->object->uri}]"
        );
    }

    public function testGet() {
        $response = $this->object->uri('http://example.com')->get();
        $entity_body = $response->entity_body;
        $this->assertEquals( ! empty($entity_body), "No Entity Body returned");
        $this->assertTrue($response->status_code=='200',
            "Response code expected 200, found [".$response->header('status_code')."]");
    }

    public function testHead() {
        $response = $this->object->uri('http://example.com')->head();
        $entity_body = $response->entity_body;
        $this->assertEquals( empty($entity_body), "Entity Body returned, expected empty");
        $this->assertTrue($response->status_code=='200',
            "Response code expected 200, found [".$response->header('status_code')."]");
    }

    public function testOptions() {
        $response = $this->object->uri('http://example.com')->options();
        $entity_body = $response->entity_body;
        $this->assertEquals( empty($entity_body), "Entity Body returned, expected empty");
        $this->assertTrue($response->status_code=='200',
            "Response code expected 200, found [".$response->header('status_code')."]");
        $this->assertArrayHasKey('allow', $response->headers,"expected 'allow' header not found");
    }

    public function testPost() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPut().
     */
    public function testPut() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
?>
